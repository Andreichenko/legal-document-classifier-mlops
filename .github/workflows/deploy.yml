name: Deploy to AWS ECS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: legal-classifier-dev
  ECS_CLUSTER: legal-classifier-dev
  ECS_SERVICE: legal-classifier-dev
  ECS_TASK_DEFINITION: legal-classifier-dev

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python src/prepare_data.py
        python src/train_model.py
        python test_api.py

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -f docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -f docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
    
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -out=tfplan
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
    
    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
    
    - name: Update ECS service
      run: |
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
    
    - name: Wait for service to stabilize
      run: |
        aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE
    
    - name: Get ALB URL
      id: alb-url
      run: |
        ALB_URL=$(aws elbv2 describe-load-balancers --names legal-classifier-dev --query 'LoadBalancers[0].DNSName' --output text)
        echo "alb_url=http://$ALB_URL" >> $GITHUB_OUTPUT
    
    - name: Test deployment
      run: |
        sleep 30
        curl -f ${{ steps.alb-url.outputs.alb_url }}/health || exit 1
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ Deployment successful!
            
            **API Endpoints:**
            - Health Check: ${{ steps.alb-url.outputs.alb_url }}/health
            - API Docs: ${{ steps.alb-url.outputs.alb_url }}/docs
            - Classify: ${{ steps.alb-url.outputs.alb_url }}/classify
            
            **Test the API:**
            \`\`\`bash
            curl -X POST "${{ steps.alb-url.outputs.alb_url }}/classify" \\
                 -H "Content-Type: application/json" \\
                 -d '{"text": "Office space rental agreement"}'
            \`\`\``
          }) 